name: Push Artifact to JFrog

on:
  workflow_call:
    inputs:
      dotnet_version:
        description: '.NET SDK version to use'
        required: true
        type: string
      csproj_file:
        description: 'The path to the .csproj file'
        required: true
        type: string
      jfrog_artifact_path:
        description: 'The path where the artifact should be uploaded in JFrog'
        required: true
        type: string
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup .NET SDK with version from input
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Install JFrog CLI
        run: |
          curl -fL https://getcli.jfrog.io | sh
          chmod +x jfrog
          sudo mv jfrog /usr/local/bin/jfrog    

      # Step 3: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore "${{ inputs.csproj_file }}"

      # Step 4: Get and update the build version using the .csproj file from input
      - name: Set build version
        id: versioning
        run: |
          # Extract version from the .csproj file
          current_version=$(grep -oPm1 "(?<=<Version>)[^<]+" "${{ inputs.csproj_file }}")
          echo "Current version: $current_version"

          # Extract major and minor version
          major_version=$(echo $current_version | cut -d. -f1)
          minor_version=$(echo $current_version | cut -d. -f2)
          
          # Auto-increment build number using the GitHub run number
          build_number=$(( $GITHUB_RUN_NUMBER ))

          # Construct the new version (major.minor.build)
          new_version="${major_version}.${minor_version}.${build_number}"
          echo "New version: $new_version"

          # Make the new version available to other steps
          echo "VERSION=$new_version" >> $GITHUB_ENV

      # Step 5: Build the project with the new version
      - name: Build project
        run: dotnet build -c Release /p:Version=${{ env.VERSION }} "${{ inputs.csproj_file }}"

      # Step 6: Package the build
      - name: Package project
        run: dotnet publish -c Release -o ./output "${{ inputs.csproj_file }}"

      # Step 7: Configure JFrog CLI using inputs
      - name: Configure JFrog CLI
        run: |
          jfrog rt config --url "${{ inputs.jfrog_url }}" \
                          --user "${{ inputs.jfrog_username }}" \
                          --apikey "${{ inputs.jfrog_api_key }}"  

      # Step 8: Upload the artifact to JFrog Artifactory with dynamic path
      - name: Upload .NET artifact to JFrog Artifactory
        run: |
          jfrog rt u "output/*" "${{ inputs.jfrog_artifact_path }}/${{ env.VERSION }}/" --build-name=dotnet-build --build-number=${{ github.run_id }}
